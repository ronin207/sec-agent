// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.17;

// We first import some OpenZeppelin Contracts.
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "hardhat/console.sol";

// We inherit the contract we imported. This means we'll have access
// to the inherited contract's methods.
contract MyEpicNFT is ERC721 {
  // Magic given to us by OpenZeppelin to help us keep track of tokenIds.
  using Counters for Counters.Counter;
  Counters.Counter private _tokenIds;

  // We need to pass the name of our NFTs token and its symbol.
  constructor() ERC721 ("SquareNFT", "SQUARE") {
    console.log("This is my NFT contract. Woah!");
  }

  // A function our user will hit to get their NFT.
  function makeAnEpicNFT() public {
     // Get the current tokenId, this starts at 0.
    uint256 newItemId = _tokenIds.current();

     // Actually mint the NFT to the sender using msg.sender.
    _safeMint(msg.sender, newItemId);
    
    // Return the NFT's metadata
    tokenURI(newItemId);

    // Increment the counter for when the next NFT is minted.
    _tokenIds.increment();
  }

  // Set the NFT's metadata
  function tokenURI(uint256 _tokenId) public view override returns (string memory) {
    require(_exists(_tokenId), "ERC721Metadata: URI query for nonexistent token");

    console.log("An NFT w/ ID %s has been minted to %s", _tokenId, msg.sender);
    // JSON url
    // return "https://www.jsonkeeper.com/b/T6PO";

    // JSON encoded
    return string(
      abi.encodePacked(
        "data:application/json;base64,",
        "ewogICAgIm5hbWUiOiAiTWFyaWtpdGEiLAogICAgImRlc2NyaXB0aW9uIjogIkFuIE5GVCBvZiBFdmEgU2FudG9zIiwKICAgICJpbWFnZSI6ICJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBEOTRiV3dnZG1WeWMybHZiajBpTVM0d0lpQmxibU52WkdsdVp6MGlWVlJHTFRnaVB6NEtQQ0ZFVDBOVVdWQkZJSE4yWnlBZ1VGVkNURWxESUNjdEx5OVhNME12TDBSVVJDQlRWa2NnTVM0eEx5OUZUaWNnSjJoMGRIQTZMeTkzZDNjdWR6TXViM0puTDBkeVlYQm9hV056TDFOV1J5OHhMakV2UkZSRUwzTjJaekV4TG1SMFpDYytDanh6ZG1jZ2QybGtkR2c5SWpFd04zQjRJaUJvWldsbmFIUTlJakV5TW5CNElpQmxibUZpYkdVdFltRmphMmR5YjNWdVpEMGlibVYzSURReExqVWdNelV1TlNBeE1EY2dNVEl5SWlCMlpYSnphVzl1UFNJeExqRWlJSFpwWlhkQ2IzZzlJalF4TGpVZ016VXVOU0F4TURjZ01USXlJaUI0Yld3NmMzQmhZMlU5SW5CeVpYTmxjblpsSWlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpUGdvOGNHRjBhQ0JrUFNKdE5UZ3VPU0E0Tnk0M1l6VXVPQ0E0TGpZZ01Ua3VNeUF4TVM0NUlESTRMamdnTVRNdU16azVJREUxSURJdU16azVJRE13TGpjdE1DNDFJRFF5TFRFeExqSXdNU0F5TFRFdU9TMHhMVFV0TXk0eE1ERXRNeTR4TFRFd0xqRTVPU0E1TGpjdE1qUXVNVGs1SURFeUxUTTNMamN3TVNBeE1DNHhMVGd1TVMweExqRXRNakV1TWkwMExqRXRNall1TWkweE1TNDBMVEV1TlRrNExUSXVNams0TFRVdU16azRMVEF1TURrNExUTXVOems0SURJdU1qQXllaUlnWm1sc2JEMGlJekZGTUVZd015SXZQZ284Y0dGMGFDQmtQU0p0TmpJdU55QXhORFF1Tm1NMExqZ3ROeTR4T1RrZ01UY3VNaTA1TGpnZ01qVXRNVEV1TVRrNUlERXpMamd0TWk0MUlESTRMallnTUM0eE1ERWdNemd1T0RrNUlEa3VPRGs1SURJZ01TNDVJRFV1TVRBeExURXVNU0F6TGpFd01TMHpMakV0TVRFdE1UQXVOQzB5Tmk0eE1ERXRNVE11TlMwME1DNDRMVEV4TGpRdE9TNDRJREV1TkMweU5DQTBMamN0TXpBZ01UTXVOakF4TFRFdU5pQXlMakk1T1NBeUxqSWdOQzQwT1RrZ015NDRJREl1TVRrNWVpSWdabWxzYkQwaUl6RkZNRVl3TXlJdlBnbzhjR0YwYUNCa1BTSnRORGt1TnlBeE1UQXVPV014TVM0M0lEUXVOaUF5TlM0MklEVXVOams1SURNNElEWXVNeUF4T0NBd0xqZzVPU0F6Tnk0eUxUQXVPU0ExTXk0eUxUa3VOeUF5TGpVdE1TNDBJREF1TXkwMUxqRXRNaTR5TFRNdU9DMHhOUzQwSURndU5TMHpNeTQzSURrdU9DMDFNU0E1TGpFdE1USXVNUzB3TGpVdE1qVXVOUzB4TGpZdE16WXVPUzAyTGpFdE1pNDJMVEV0TXk0M0lETXVNaTB4TGpFZ05DNHllaUlnWm1sc2JEMGlJekZGTUVZd015SXZQZ284Y0dGMGFDQmtQU0p0TmpBdU9DQXhNakJqTFRBdU15QXhNaTQ0SURJMkxqSWdORFV1TkNBek1pNDBJREk0TGpJZ01DNDFMVEV1TkNBd0xqa3RNeUF4TGpNdE5DNDNJREF1TkNBeExqY2dNQzQ0SURNdU15QXhMak1nTkM0M0lEWXVNaUF4Tnk0eUlETXlMamN0TVRVdU5TQXpNaTQwTFRJNExqSXRNQzR6TFRFeUxqZ3ROamN1TVMweE1pNDRMVFkzTGpRZ01Ib2lJR1Z1WVdKc1pTMWlZV05yWjNKdmRXNWtQU0p1WlhjZ0lDQWdJaUJtYVd4c1BTSWpOelUwUXpJMElpQnZjR0ZqYVhSNVBTSXVPQ0l2UGdvOGNHRjBhQ0JrUFNKdE1UQTVJRGt6TGpoek1DNDFMVEU1TGpJdE9DNHpMVEl6TFRFNUxqY3RNUzQxTFRJeUxqRWdPQzQzWXkweUxqUWdNVEF1TVMwd0xqWWdNVEV1TkMwd0xqWWdNVEV1TkhNeE5TNDBJRFF1TlNBeU5DNDNJRFF1TTJ3MkxqTXRNUzQwZWlJZ1ptbHNiRDBpSXpBek1UWXhNaUl2UGdvOFpHVm1jejRLUEdacGJIUmxjaUJwWkQwaVpDSWdlRDBpT0RJdU16QTRJaUI1UFNJMk9DNHhOVGdpSUhkcFpIUm9QU0l5Tmk0NE5qUWlJR2hsYVdkb2REMGlNall1TlRnMElpQm1hV3gwWlhKVmJtbDBjejBpZFhObGNsTndZV05sVDI1VmMyVWlQZ284Wm1WRGIyeHZjazFoZEhKcGVDQjJZV3gxWlhNOUlqRWdNQ0F3SURBZ01DQWdNQ0F4SURBZ01DQXdJQ0F3SURBZ01TQXdJREFnSURBZ01DQXdJREVnTUNJdlBnbzhMMlpwYkhSbGNqNEtQQzlrWldaelBnbzhiV0Z6YXlCcFpEMGlZU0lnZUQwaU9ESXVNekE0SWlCNVBTSTJPQzR4TlRnaUlIZHBaSFJvUFNJeU5pNDROalFpSUdobGFXZG9kRDBpTWpZdU5UZzBJaUJ0WVhOclZXNXBkSE05SW5WelpYSlRjR0ZqWlU5dVZYTmxJajRLUEdjZ1ptbHNkR1Z5UFNKMWNtd29JMlFwSWo0S1BISmhaR2xoYkVkeVlXUnBaVzUwSUdsa1BTSmpJaUJqZUQwaUxURXpNalV1TnlJZ1kzazlJakUyT1M0eE9DSWdjajBpTXprdU5EQTFJaUJtZUQwaUxURXpNVGd1TmlJZ1puazlJakUwTnk0ek1pSWdaM0poWkdsbGJuUlVjbUZ1YzJadmNtMDlJbTFoZEhKcGVDZ3VNVFkyTlNBdU16UXlOaUF0TGpNME9EUWdMakUyT1RNZ016YzJMakUxSURVd09DNHhLU0lnWjNKaFpHbGxiblJWYm1sMGN6MGlkWE5sY2xOd1lXTmxUMjVWYzJVaVBnbzhjM1J2Y0NCemRHOXdMV052Ykc5eVBTSWpabVptSWlCdlptWnpaWFE5SWk0eE1URTJJaTgrQ2p4emRHOXdJSE4wYjNBdFkyOXNiM0k5SWlNd01EQTBNVGdpSUc5bVpuTmxkRDBpTGpjd016TWlMejRLUEM5eVlXUnBZV3hIY21Ga2FXVnVkRDRLUEhCdmJIbG5iMjRnY0c5cGJuUnpQU0l4TURRdU15QTFOQzQySURFeU15NDJJRGswTGpJZ09ERXVNeUF4TVRRdU9DQTJNaUEzTlM0eUlpQm1hV3hzUFNKMWNtd29JMk1wSWk4K0Nqd3ZaejRLUEM5dFlYTnJQZ284Y0dGMGFDQmtQU0p0T0RrdU15QTJPUzQwWXpZdU15MHpMakVnTVRRdU1UQXhMVEF1TWlBeE55NHpJRFl1TlNBekxqSWdOaTQzSURVdU16QXhJREl5TGpRdE5TNDJJREUzTGpZdE5pNHpJRE11TVMweE5DNHhJREF1TWkweE55NHpMVFl1TlMwekxqSXROaTQyTFRBdU55MHhOQzQxSURVdU5pMHhOeTQyZWlJZ1pXNWhZbXhsTFdKaFkydG5jbTkxYm1ROUltNWxkeUFnSUNBaUlHWnBiR3c5SWlObVptWWlJRzFoYzJzOUluVnliQ2dqWVNraUlHOXdZV05wZEhrOUlpNHpJaTgrQ2p4bklITjBjbTlyWlQwaUl6RTNNakV4UVNJZ2MzUnliMnRsTFcxcGRHVnliR2x0YVhROUlqRXdJaUJ6ZEhKdmEyVXRkMmxrZEdnOUlqRXVORFUxTXlJK0NqeHdZWFJvSUdROUltMDVOeTQ0SURjMUxqSmpMVEl1TXkwM0xqZ3RNUzQxTFRJekxqa2dNVEV0TWpVaUlHWnBiR3c5SW01dmJtVWlMejRLUEdWc2JHbHdjMlVnZEhKaGJuTm1iM0p0UFNKdFlYUnlhWGdvTFM0Mk1EQXpJQzQzT1RrNElDMHVOems1T0NBdExqWXdNRE1nTWpFNExqTTFJQzAzTGpNek5qSXBJaUJqZUQwaU1URXhMakF4SWlCamVUMGlOVEF1T0RrM0lpQnllRDBpTWlJZ2NuazlJakl1TmlJZ1ptbHNiRDBpSXpFM01qRXhRU0l2UGdvOEwyYytDanhuSUhOMGNtOXJaVDBpSXpFM01qRXhRU0lnYzNSeWIydGxMVzFwZEdWeWJHbHRhWFE5SWpFd0lpQnpkSEp2YTJVdGQybGtkR2c5SWpFdU5EVTFNeUkrQ2p4d1lYUm9JR1E5SW0wM05TNHhJRFV3TGpWak1UTXVOQ0F5TGpJZ01UUXVOU0F5TUNBeE1pNHhJREk0TGpRaUlHWnBiR3c5SW01dmJtVWlMejRLUEdWc2JHbHdjMlVnZEhKaGJuTm1iM0p0UFNKdFlYUnlhWGdvTFM0MU56VXhJQzB1T0RFNE1TQXVPREU0TVNBdExqVTNOVEVnTnpNdU1EWXlJREUwTUM0ME15a2lJR040UFNJM01pNDVPVGtpSUdONVBTSTFNUzR5TkRFaUlISjRQU0l5TGpNaUlISjVQU0l5TGpjaUlHWnBiR3c5SWlNeE56SXhNVUVpTHo0S1BDOW5QZ284Y21Ga2FXRnNSM0poWkdsbGJuUWdhV1E5SW1JaUlHTjRQU0l5TnprdU1EUWlJR041UFNJMk1EUXVNamNpSUhJOUlqTTBMakkwTkNJZ1ozSmhaR2xsYm5SVWNtRnVjMlp2Y20wOUltMWhkSEpwZUNndU9USTFPQ0F1TWpreU55QXRMak13TVNBdU9UVXhPU0F4T0M0eU9UWWdMVFUwTVM0MU15a2lJR2R5WVdScFpXNTBWVzVwZEhNOUluVnpaWEpUY0dGalpVOXVWWE5sSWo0S1BITjBiM0FnYzNSdmNDMWpiMnh2Y2owaUkwWXhOVUV5TkNJZ2IyWm1jMlYwUFNJd0lpOCtDanh6ZEc5d0lITjBiM0F0WTI5c2IzSTlJaU5ETVRJM01rUWlJRzltWm5ObGREMGlNU0l2UGdvOEwzSmhaR2xoYkVkeVlXUnBaVzUwUGdvOGNHRjBhQ0JrUFNKdE1UQTBMallnT0RRdU1tTXhPQzR5SURVdU9DQXlPQzQyTURJZ01qUXVNems1SURJekxqSWdOREV1TmkwMUxqTTVPU0F4Tnk0eUxUSTBMallnTWpZdU5TMDBNaTQ1SURJd0xqY3RNVGd1TWkwMUxqZ3RNamd1TmkweU5DNDBMVEl6TGpJdE5ERXVObk15TkM0MkxUSTJMalVnTkRJdU9TMHlNQzQzZWlJZ1ptbHNiRDBpZFhKc0tDTmlLU0l2UGdvOFpXeHNhWEJ6WlNCMGNtRnVjMlp2Y20wOUltMWhkSEpwZUNndU9UUXhNU0F0TGpNek9ERWdMak16T0RFZ0xqazBNVEVnTFRNekxqZ3pJRE13TGpZeU9Da2lJR040UFNJM01TNHdNVGdpSUdONVBTSXhNVEl1TkRRaUlISjRQU0kyTGpnaUlISjVQU0kzTGpZaUlHWnBiR3c5SWlNeE56SXhNVUVpTHo0S1BIQmhkR2dnWkQwaWJUYzRMallnT1RjdU5HTXRNUzR6TFRNdU5pQXdMalF0Tnk0MElETXVOeTA0TGpaek55QXdMamNnT0M0eklEUXVNeTB3TGpRZ055NDBMVE11TnlBNExqWXROeTB3TGpndE9DNHpMVFF1TTNvaUlHWnBiR3c5SWlNeE56SXhNVUVpTHo0S1BHTnBjbU5zWlNCamVEMGlPRE11TWlJZ1kzazlJakV6TWk0eklpQnlQU0kzTGpNaUlHWnBiR3c5SWlNeE56SXhNVUVpTHo0S1BIQmhkR2dnWkQwaWJURXhOaTQ0SURFeU1DNDFZeTB6TGpZdE1TMDFMamN0TlM0eExUUXVOaTA1TGpFZ01TNHhMVFF1TVRBeUlEUXVPRGs1TFRZdU5TQTRMall0TlM0Mk1ESWdNeTQyTURFZ01TQTFMamNnTlM0eE1ESWdOQzQyTURFZ09TNHhNREl0TVM0eU1ERWdOQzR4TFRVdU1EQXhJRFl1TmkwNExqWXdNU0ExTGpaNklpQm1hV3hzUFNJak1UY3lNVEZCSWk4K0NqeHdZWFJvSUdROUltMHhNRElnTVRBeExqbGpMVE11TkMwd0xqa3ROUzR6TFRRdU5qQXlMVFF1TXkwNExqTWdNUzB6TGpjZ05DNDFMVFV1T1NBM0xqZzVPUzAxY3pVdU16QXhJRFF1TmlBMExqTXdNU0E0TGpOakxUQXVPU0F6TGpjdE5DNDFJRFV1T1MwM0xqa2dOWG9pSUdacGJHdzlJaU14TnpJeE1VRWlMejRLUEdOcGNtTnNaU0JqZUQwaU1UQTJMamdpSUdONVBTSXhNeklpSUhJOUlqY3VNeUlnWm1sc2JEMGlJekUzTWpFeFFTSXZQZ284Y0dGMGFDQmtQU0p0T1RRdU5DQTRNaTQxWXkweElEVXVNUzB4TGpNZ05EQXVPQzB3TGpVZ05qVXVOMmd4TGpSek1DNDVMVEkxTGpVZ01DNDJMVE00TGpkakxUQXVOQzB4TXk0ekxURXVOUzB5TnkweExqVXRNamQ2SWlCbWFXeHNQU0lqTkVZeVFUQkRJaTgrQ2p3dmMzWm5QZ289Igp9"
      )
    );
  }
}